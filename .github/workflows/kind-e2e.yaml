name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main' ]

  push:
    branches: [ 'main' ]

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/net-kourier

jobs:
  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
        - v1.24.7
        - v1.25.3

        gateway:
        - quay.io/maistra/proxyv2-ubi8:2.1.0
        - docker.io/envoyproxy/envoy:v1.21-latest
        - docker.io/envoyproxy/envoy:v1.22-latest

        upstream-tls:
        - plain
        - tls

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases
        include:
        - k8s-version: v1.24.7
          kind-version: v0.17.0
          kind-image-sha: sha256:577c630ce8e509131eab1aea12c022190978dd2f745aac5eb1fe65c0807eb315

        - k8s-version: v1.25.3
          kind-version: v0.17.0
          kind-image-sha: sha256:f52781bc0d7a19fb6c405c2af83abfeb311f130707a0e219175677e366cc45d1

    env:
      GOPATH: ${{ github.workspace }}
      KO_DOCKER_REPO: kind.local
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local

    steps:
    - name: Set up Go 1.18.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.18.x

    - name: Setup ko
      uses: imjasonh/setup-ko@v0.6
      with:
        version: latest-release

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/net-kourier

    - name: Install KinD
      run: |
        set -x

        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Create KinD Cluster
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster
        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}

        # This is needed in order to
        # (1) support projected volumes with service account tokens. See
        #     https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        # (2) use a random cluster suffix
        kubeadmConfigPatches:
          - |
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
            networking:
              dnsDomain: "${CLUSTER_SUFFIX}"
        EOF

        # Create a cluster!
        kind create cluster --config kind.yaml

    - name: Deploy certificates for upstream traffic
      if: matrix.upstream-tls == 'tls'
      run: |
        set -o pipefail
        echo ">> Deploy certificate for upstream traffic"
        ./test/generate-upstream-cert.sh

    - name: Install Knative net-kourier
      run: |
        set -o pipefail

        # Build and Publish our containers to the docker daemon (including test assets)
        ko resolve -f test/config/ -f config/ | \
          sed 's/LoadBalancer/NodePort/g' | \
          sed "s|docker.io/envoyproxy/envoy:.*|${{ matrix.gateway }}|" | \
          kubectl apply -f -

    - name: Wait for Ready
      run: |
        echo Waiting for Pods to become ready.
        # # TODO: Find a good way to do this with chaos enabled.
        # kubectl wait pod --for=condition=Ready -n ${GATEWAY_NAMESPACE_OVERRIDE} -l '!job-name'
        kubectl wait pod --timeout 300s --for=condition=Ready -n knative-serving -l '!job-name'

        # For debugging.
        kubectl get pods --all-namespaces

    - name: Run e2e Tests
      run: |
        ./test/e2e-kind.sh

    - name: Post failure notice to Slack
      uses: rtCamp/action-slack-notify@v2.1.0
      if: ${{ failure() && github.event_name != 'pull_request' }}
      env:
        SLACK_ICON: http://github.com/knative.png?size=48
        SLACK_USERNAME: github-actions
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

        SLACK_CHANNEL: 'net-kourier'
        SLACK_COLOR: '#8E1600'
        MSG_MINIMAL: 'true'
        SLACK_TITLE: Periodic ${{ matrix.k8s-version }} failed.
        SLACK_MESSAGE: |
          For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
