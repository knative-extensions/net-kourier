# Copyright 2020 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: 3scale-kourier-gateway
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: devel
    app.kubernetes.io/name: knative-serving
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  selector:
    matchLabels:
      app: 3scale-kourier-gateway
  template:
    metadata:
      labels:
        app: 3scale-kourier-gateway
      annotations:
        # v0.26 supports envoy v3 API, so
        # adding this label to restart pod.
        networking.knative.dev/poke: "v0.26"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/stats/prometheus"
    spec:
      containers:
        - args:
            - --base-id 1
            - -c /tmp/config/envoy-bootstrap.yaml
            - --log-level info
          command:
            - /usr/local/bin/envoy
          image: docker.io/envoyproxy/envoy:v1.26-latest
          name: kourier-gateway
          ports:
            - name: http2-external
              containerPort: 8080
              protocol: TCP
            - name: http2-internal
              containerPort: 8081
              protocol: TCP
            - name: https-external
              containerPort: 8443
              protocol: TCP
            - name: http-probe
              containerPort: 8090
              protocol: TCP
            - name: https-probe
              containerPort: 9443
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config-volume
              mountPath: /tmp/config
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - |-
                  set -e

                  exec 3<>/dev/tcp/localhost/9000
                  echo -e "POST /healthcheck/fail HTTP/1.1\nHost: localhost\nConnection: close\n\n" >&3

                  active_connections=1

                  while [ "$active_connections" != "0" ]
                  do
                      sleep 1

                      exec 3<>/dev/tcp/localhost/9000
                      # get downstream_cx_active (active requests) for all "public" listeners (8080, 8081, 8443)
                      echo -e "GET /stats?filter=listener.0.0.0.0_%288080%7C8081%7C8443%29.downstream_cx_active&format=text HTTP/1.1\nHost: localhost\nConnection: close\n\n" >&3

                      active_connections=$(cat <&3 | grep 'downstream_cx_active' | awk 'BEGIN{active=0} {active+=$NF} END{print active}')
                      echo "Active connections: $active_connections"
                  done

                  echo "No more active connections!"
          readinessProbe:
            httpGet:
              httpHeaders:
                - name: Host
                  value: internalkourier
              path: /ready
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              httpHeaders:
                - name: Host
                  value: internalkourier
              path: /ready
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 6
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              cpu: "1"
              memory: 500Mi
      terminationGracePeriodSeconds: 120
      volumes:
        - name: config-volume
          configMap:
            name: kourier-bootstrap
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: kourier
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: devel
    app.kubernetes.io/name: knative-serving
spec:
  ports:
    - name: http2
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: 3scale-kourier-gateway
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: kourier-internal
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: devel
    app.kubernetes.io/name: knative-serving
spec:
  ports:
    - name: http2
      port: 80
      protocol: TCP
      targetPort: 8081
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8444
  selector:
    app: 3scale-kourier-gateway
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: 3scale-kourier-gateway
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: devel
    app.kubernetes.io/name: knative-serving
spec:
  minReplicas: 1
  maxReplicas: 10
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: 3scale-kourier-gateway
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          # Percentage of the requested CPU
          averageUtilization: 100
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: 3scale-kourier-gateway-pdb
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/version: devel
    app.kubernetes.io/name: knative-serving
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: 3scale-kourier-gateway
